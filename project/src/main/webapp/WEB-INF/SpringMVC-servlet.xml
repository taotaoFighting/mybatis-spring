<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
                          
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <context:component-scan base-package="com.project.controller"/>
    
    <!-- AOP扫描 -->
   <!--  <aop:aspectj-autoproxy proxy-target-class="true" />	 -->
    
     <!--将日志类注入到bean中。-->
    <!-- <bean id="logAspect" class="com.bstek.bsdn.log.ArchivesLogAspect"></bean>    -->
    
      <!-- 开启注解功能-->
       <mvc:annotation-driven /> 
       <!-- Spring对应的页面访问方式-->
      <mvc:default-servlet-handler/>
   
    
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter"/> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean>  
    
  <!--   <aop:config>
          调用日志类
          <aop:aspect id="LogAspect" ref="logAspect">
              配置在controller包下所有的类在调用之前都会被拦截  
              <aop:pointcut id="log" expression="execution(* com.bstek.bsdn.controller.*.*(..))"/>  
              方法前触发<aop:before pointcut-ref="log" method="before"/> 
               方法后触发<aop:after pointcut-ref="log" method="after"/>
                环绕触发  <aop:around pointcut-ref="log" method="around"/>  
            </aop:aspect>  
    </aop:config> 
     -->
     
     <!-- 静态文件扫描 -->
	   <mvc:resources location="/js/" mapping="/js/**" />
	   <mvc:resources location="/resource/" mapping="/resource/**" />
	   <mvc:resources location="/content/" mapping="/content/**" />
	   
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean id="templateResolver"   class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="/views/" />  
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML" />
        <property name="cacheable" value="false" />
        <property name="characterEncoding" value="UTF-8"/>
    </bean>  
      
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>   
    
    <!--springMvc thymeleaf集成 -->
    <bean id="templateEngine"  class="org.thymeleaf.spring4.SpringTemplateEngine">  
      <property name="templateResolver" ref="templateResolver" />  
    </bean>  
   
   <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">  
     <property name="templateEngine" ref="templateEngine" />  
     <!--解决中文乱码-->  
     <property name="characterEncoding" value="UTF-8"/>  
   </bean>  
  

</beans>  